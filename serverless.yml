service: task-manager

provider:
  name: aws
  runtime: nodejs16.x
  versionFunctions: false
  stage: prod
  region: ap-south-1
  apiGateway: 
    binaryMediaTypes:
      -'*/*'
  ecr:
    scanOnPush: true
    images:
      sonarqube_fargate:
        path: .

  # This section is used to configure permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - s3:*
        - sqs:*
        - sns:*
        - kms:*
      Resource: "*"
    # This will add dynamoDB permissions for the
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "*"
  memorySize: 128
  # Setting a timeout of 15 minutes on all lambdas in this stack
  timeout: 900

fargate:
  clusterName: sonar-qube-fargate
  containerInsights: true
  memory: '0.5GB'
  cpu: 256
  architecture: X86_64
  vpc:
    assignPublicIp: true
    securityGroupIds:
      - sg-006f415a1d30d62d1
    subnetIds:
      - subnet-0cb2c1303b4628af8

  tasks:
    sonarqube-fargate:
      name: sonarqube-fargate
      image: sonarqube_fargate
      memory: '0.5GB'
      cpu: 256
      vpc:
        securityGroupIds:
          - sg-006f415a1d30d62d1
        subnetIds:
          - subnet-0cb2c1303b4628af8
        assignPublicIp: true
      service:
        desiredCount: 1
        maximumPercent: 200
      portMappings:
        - containerPort: 9000
          hostPort: 9000

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-fargate

package:
  individually: true

custom:
  esbuild:
    bundle: true
    minify: false
    disableIncremental: true
    concurrency: 1

functions:
  getProjects:
    handler: src/project/getProjects.handler
    timeout: 30
    events:
      - http:
          path: /projects
          method: get
          cors:
            maxAge: 3600
  getProject:
    handler: src/project/getProject.handler
    timeout: 30
    events:
      - http:
          path: /projects/{id}
          method: get
          cors:
            maxAge: 3600
  createProject:
    handler: src/project/createProject.handler
    timeout: 30
    events:
      - http:
          path: /projects
          method: post
          cors:
            maxAge: 3600
  updateProject:
    handler: src/project/updateProject.handler
    timeout: 30
    events:
      - http:
          path: /projects/{id}
          method: patch
          cors:
            maxAge: 3600
  deleteProject:
    handler: src/project/deleteProject.handler
    timeout: 30
    events:
      - http:
          path: /projects/{id}
          method: delete
          cors:
            maxAge: 3600
  getTasks:
    handler: src/task/getTasks.handler
    timeout: 30
    events:
      - http:
          path: /tasks
          method: get
          cors:
            maxAge: 3600
  getTask:
    handler: src/task/getTask.handler
    timeout: 30
    events:
      - http:
          path: /tasks/{id}
          method: get
          cors:
            maxAge: 3600
  createTask:
    handler: src/task/createTask.handler
    timeout: 30
    events:
      - http:
          path: /tasks
          method: post
          cors:
            maxAge: 3600
  updateTask:
    handler: src/task/updateTask.handler
    timeout: 30
    events:
      - http:
          path: /tasks/{id}
          method: patch
          cors:
            maxAge: 3600
  s3UploadValidate:
    handler: src/task/uploadToS3.handler
    timeout: 30
    events:
      - http:
          path: /uploadToS3/{id}
          method: post
          cors:
            maxAge: 3600
  deleteTask:
    handler: src/task/deleteTask.handler
    timeout: 30
    events:
      - http:
          path: /tasks/{id}
          method: delete
          cors:
            maxAge: 3600

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: attachments-bucket
    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: projects-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tasks-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: projectId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: task-project-index
            KeySchema:
              - AttributeName: projectId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    TaskManagerQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: sqs-queue-${opt:stage, self:provider.stage}-task-manager-queue.fifo
        VisibilityTimeout: 400
        FifoQueue: true
